[
  {
    "objectID": "Plotting-sine-waves.html",
    "href": "Plotting-sine-waves.html",
    "title": "Plotting sine waves in ggplot & plotly",
    "section": "",
    "text": "#I will be using the following libraries:\nif (!require(pacman)) install.packages(\"pacman\")\n\nLoading required package: pacman\n\np_load(tidyverse,hrbrthemes,plotly,ggplot2,igraph)\n\n\n\nBelow I am using ggplot & plotly to create sine wave plots in R.",
    "crumbs": [
      "Plotting sine waves in ggplot & plotly"
    ]
  },
  {
    "objectID": "Plotting-sine-waves.html#libraries",
    "href": "Plotting-sine-waves.html#libraries",
    "title": "Plotting sine waves in ggplot & plotly",
    "section": "",
    "text": "#I will be using the following libraries:\nif (!require(pacman)) install.packages(\"pacman\")\n\nLoading required package: pacman\n\np_load(tidyverse,hrbrthemes,plotly,ggplot2,igraph)\n\n\n\nBelow I am using ggplot & plotly to create sine wave plots in R.",
    "crumbs": [
      "Plotting sine waves in ggplot & plotly"
    ]
  },
  {
    "objectID": "Plotting-sine-waves.html#sine-wave-equation",
    "href": "Plotting-sine-waves.html#sine-wave-equation",
    "title": "Plotting sine waves in ggplot & plotly",
    "section": "Sine Wave Equation",
    "text": "Sine Wave Equation\n\\[\ny=A*sin(Bx+C)+D\n\\]\n\nDefinitions:\n\nA - is the amplitude, which represents the maximum displacement from the equilibrium position.\nB - is the frequency or angular frequency, which determines how many cycles occur in a given interval of X.\nC - is the phase shift, which represents a horizontal shift along the X-axis.\nD - is the vertical shift, which represents a vertical translation of the curve.\n\n\n\nggplot\nIn order to graph this with ggplot or later with plotly we will have to have a data frame. In order to get that I am going to make a number of assignments so that I can input variables into my sign equation.\n\n#Asign our variables:\nA &lt;- 1 #amplitude\nB &lt;- 4 #frequency or period\nC &lt;- 0 #phase shift or horizontial shift\nD &lt;- 0 #vertical shift\nstart_point &lt;- 1 #where your curve starts\n\n#frequency from above will be assigned again here using the seq() function in base R to create a sequence of numbers from 1 to B - in order to create a \"smooth\" looking line we will \"by\" equal to \".01\" which means that we will have a point on the x axis from 1 to B every .01 increment: \nperiod &lt;- seq(from = start_point,\n             to = B*pi, \n             by = .1)\n#plug the period variable into our dataframe and set Y equal to our equation above. - in order to get the graph to move with these variables all of them must be present in the y column of our dataframe:\ndf &lt;- data.frame(x = period,\n               y = A*sin(period+C)+D,\n               label = 1:length(period),\n               shift = D)\n\n#Creating a phase shifted wave to superimpose on the first wave:\ndf2 &lt;- data.frame(x = period,\n               y = A*sin(period+(C+2))+D,\n               label = 1:length(period),\n               shift = D)\n\n#data frame of sinusoidal wave:\ndf %&gt;% arrange(x)\n\n       x           y label shift\n1    1.0  0.84147098     1     0\n2    1.1  0.89120736     2     0\n3    1.2  0.93203909     3     0\n4    1.3  0.96355819     4     0\n5    1.4  0.98544973     5     0\n6    1.5  0.99749499     6     0\n7    1.6  0.99957360     7     0\n8    1.7  0.99166481     8     0\n9    1.8  0.97384763     9     0\n10   1.9  0.94630009    10     0\n11   2.0  0.90929743    11     0\n12   2.1  0.86320937    12     0\n13   2.2  0.80849640    13     0\n14   2.3  0.74570521    14     0\n15   2.4  0.67546318    15     0\n16   2.5  0.59847214    16     0\n17   2.6  0.51550137    17     0\n18   2.7  0.42737988    18     0\n19   2.8  0.33498815    19     0\n20   2.9  0.23924933    20     0\n21   3.0  0.14112001    21     0\n22   3.1  0.04158066    22     0\n23   3.2 -0.05837414    23     0\n24   3.3 -0.15774569    24     0\n25   3.4 -0.25554110    25     0\n26   3.5 -0.35078323    26     0\n27   3.6 -0.44252044    27     0\n28   3.7 -0.52983614    28     0\n29   3.8 -0.61185789    29     0\n30   3.9 -0.68776616    30     0\n31   4.0 -0.75680250    31     0\n32   4.1 -0.81827711    32     0\n33   4.2 -0.87157577    33     0\n34   4.3 -0.91616594    34     0\n35   4.4 -0.95160207    35     0\n36   4.5 -0.97753012    36     0\n37   4.6 -0.99369100    37     0\n38   4.7 -0.99992326    38     0\n39   4.8 -0.99616461    39     0\n40   4.9 -0.98245261    40     0\n41   5.0 -0.95892427    41     0\n42   5.1 -0.92581468    42     0\n43   5.2 -0.88345466    43     0\n44   5.3 -0.83226744    44     0\n45   5.4 -0.77276449    45     0\n46   5.5 -0.70554033    46     0\n47   5.6 -0.63126664    47     0\n48   5.7 -0.55068554    48     0\n49   5.8 -0.46460218    49     0\n50   5.9 -0.37387666    50     0\n51   6.0 -0.27941550    51     0\n52   6.1 -0.18216250    52     0\n53   6.2 -0.08308940    53     0\n54   6.3  0.01681390    54     0\n55   6.4  0.11654920    55     0\n56   6.5  0.21511999    56     0\n57   6.6  0.31154136    57     0\n58   6.7  0.40484992    58     0\n59   6.8  0.49411335    59     0\n60   6.9  0.57843976    60     0\n61   7.0  0.65698660    61     0\n62   7.1  0.72896904    62     0\n63   7.2  0.79366786    63     0\n64   7.3  0.85043662    64     0\n65   7.4  0.89870810    65     0\n66   7.5  0.93799998    66     0\n67   7.6  0.96791967    67     0\n68   7.7  0.98816823    68     0\n69   7.8  0.99854335    69     0\n70   7.9  0.99894134    70     0\n71   8.0  0.98935825    71     0\n72   8.1  0.96988981    72     0\n73   8.2  0.94073056    73     0\n74   8.3  0.90217183    74     0\n75   8.4  0.85459891    75     0\n76   8.5  0.79848711    76     0\n77   8.6  0.73439710    77     0\n78   8.7  0.66296923    78     0\n79   8.8  0.58491719    79     0\n80   8.9  0.50102086    80     0\n81   9.0  0.41211849    81     0\n82   9.1  0.31909836    82     0\n83   9.2  0.22288991    83     0\n84   9.3  0.12445442    84     0\n85   9.4  0.02477543    85     0\n86   9.5 -0.07515112    86     0\n87   9.6 -0.17432678    87     0\n88   9.7 -0.27176063    88     0\n89   9.8 -0.36647913    89     0\n90   9.9 -0.45753589    90     0\n91  10.0 -0.54402111    91     0\n92  10.1 -0.62507065    92     0\n93  10.2 -0.69987469    93     0\n94  10.3 -0.76768581    94     0\n95  10.4 -0.82782647    95     0\n96  10.5 -0.87969576    96     0\n97  10.6 -0.92277542    97     0\n98  10.7 -0.95663502    98     0\n99  10.8 -0.98093623    99     0\n100 10.9 -0.99543625   100     0\n101 11.0 -0.99999021   101     0\n102 11.1 -0.99455259   102     0\n103 11.2 -0.97917773   103     0\n104 11.3 -0.95401925   104     0\n105 11.4 -0.91932853   105     0\n106 11.5 -0.87545217   106     0\n107 11.6 -0.82282859   107     0\n108 11.7 -0.76198358   108     0\n109 11.8 -0.69352508   109     0\n110 11.9 -0.61813711   110     0\n111 12.0 -0.53657292   111     0\n112 12.1 -0.44964746   112     0\n113 12.2 -0.35822928   113     0\n114 12.3 -0.26323179   114     0\n115 12.4 -0.16560418   115     0\n116 12.5 -0.06632190   116     0\n\ndf2 %&gt;% arrange(x)\n\n       x           y label shift\n1    1.0  0.14112001     1     0\n2    1.1  0.04158066     2     0\n3    1.2 -0.05837414     3     0\n4    1.3 -0.15774569     4     0\n5    1.4 -0.25554110     5     0\n6    1.5 -0.35078323     6     0\n7    1.6 -0.44252044     7     0\n8    1.7 -0.52983614     8     0\n9    1.8 -0.61185789     9     0\n10   1.9 -0.68776616    10     0\n11   2.0 -0.75680250    11     0\n12   2.1 -0.81827711    12     0\n13   2.2 -0.87157577    13     0\n14   2.3 -0.91616594    14     0\n15   2.4 -0.95160207    15     0\n16   2.5 -0.97753012    16     0\n17   2.6 -0.99369100    17     0\n18   2.7 -0.99992326    18     0\n19   2.8 -0.99616461    19     0\n20   2.9 -0.98245261    20     0\n21   3.0 -0.95892427    21     0\n22   3.1 -0.92581468    22     0\n23   3.2 -0.88345466    23     0\n24   3.3 -0.83226744    24     0\n25   3.4 -0.77276449    25     0\n26   3.5 -0.70554033    26     0\n27   3.6 -0.63126664    27     0\n28   3.7 -0.55068554    28     0\n29   3.8 -0.46460218    29     0\n30   3.9 -0.37387666    30     0\n31   4.0 -0.27941550    31     0\n32   4.1 -0.18216250    32     0\n33   4.2 -0.08308940    33     0\n34   4.3  0.01681390    34     0\n35   4.4  0.11654920    35     0\n36   4.5  0.21511999    36     0\n37   4.6  0.31154136    37     0\n38   4.7  0.40484992    38     0\n39   4.8  0.49411335    39     0\n40   4.9  0.57843976    40     0\n41   5.0  0.65698660    41     0\n42   5.1  0.72896904    42     0\n43   5.2  0.79366786    43     0\n44   5.3  0.85043662    44     0\n45   5.4  0.89870810    45     0\n46   5.5  0.93799998    46     0\n47   5.6  0.96791967    47     0\n48   5.7  0.98816823    48     0\n49   5.8  0.99854335    49     0\n50   5.9  0.99894134    50     0\n51   6.0  0.98935825    51     0\n52   6.1  0.96988981    52     0\n53   6.2  0.94073056    53     0\n54   6.3  0.90217183    54     0\n55   6.4  0.85459891    55     0\n56   6.5  0.79848711    56     0\n57   6.6  0.73439710    57     0\n58   6.7  0.66296923    58     0\n59   6.8  0.58491719    59     0\n60   6.9  0.50102086    60     0\n61   7.0  0.41211849    61     0\n62   7.1  0.31909836    62     0\n63   7.2  0.22288991    63     0\n64   7.3  0.12445442    64     0\n65   7.4  0.02477543    65     0\n66   7.5 -0.07515112    66     0\n67   7.6 -0.17432678    67     0\n68   7.7 -0.27176063    68     0\n69   7.8 -0.36647913    69     0\n70   7.9 -0.45753589    70     0\n71   8.0 -0.54402111    71     0\n72   8.1 -0.62507065    72     0\n73   8.2 -0.69987469    73     0\n74   8.3 -0.76768581    74     0\n75   8.4 -0.82782647    75     0\n76   8.5 -0.87969576    76     0\n77   8.6 -0.92277542    77     0\n78   8.7 -0.95663502    78     0\n79   8.8 -0.98093623    79     0\n80   8.9 -0.99543625    80     0\n81   9.0 -0.99999021    81     0\n82   9.1 -0.99455259    82     0\n83   9.2 -0.97917773    83     0\n84   9.3 -0.95401925    84     0\n85   9.4 -0.91932853    85     0\n86   9.5 -0.87545217    86     0\n87   9.6 -0.82282859    87     0\n88   9.7 -0.76198358    88     0\n89   9.8 -0.69352508    89     0\n90   9.9 -0.61813711    90     0\n91  10.0 -0.53657292    91     0\n92  10.1 -0.44964746    92     0\n93  10.2 -0.35822928    93     0\n94  10.3 -0.26323179    94     0\n95  10.4 -0.16560418    95     0\n96  10.5 -0.06632190    96     0\n97  10.6  0.03362305    97     0\n98  10.7  0.13323204    98     0\n99  10.8  0.23150983    99     0\n100 10.9  0.32747444   100     0\n101 11.0  0.42016704   101     0\n102 11.1  0.50866146   102     0\n103 11.2  0.59207351   103     0\n104 11.3  0.66956976   104     0\n105 11.4  0.74037589   105     0\n106 11.5  0.80378443   106     0\n107 11.6  0.85916181   107     0\n108 11.7  0.90595474   108     0\n109 11.8  0.94369567   109     0\n110 11.9  0.97200750   110     0\n111 12.0  0.99060736   111     0\n112 12.1  0.99930939   112     0\n113 12.2  0.99802665   113     0\n114 12.3  0.98677196   114     0\n115 12.4  0.96565778   115     0\n116 12.5  0.93489506   116     0\n\n\n\n\nDebugging\nWhen I was making assignments to the equation and data frame above I noticed I was receiving errors when the starting point and endpoints are changed. The direction of increment is determined based on the sign of to - from. If to is greater than from, the increment will be positive, causing theta values to increase from from to to. If to is less than from, the increment will be negative, causing theta values to decrease from from to to. So we need to create a function that dynamically adjusts our increment variable depending on the sign of B and our startpoint.\n\n#Asign our variables:\nA &lt;- 1 #amplitude\nB &lt;- 2 #frequency or period\nC &lt;- 0 #phase shift or horizontial shift\nD &lt;- 0 #vertical shift (displacment)\nstart_point &lt;- 0 #where your curve starts\n\n#Adjustment function for \"by\" variable:\ngenerate_increment &lt;- function(x, start_point, B) {\n  if (B - start_point &lt; 0) {\n    return(-1 * x)\n  } else if (B - start_point &gt; 0) {\n    return(1 * x)\n  } else {\n    return(0)  # In case B - start_point equals 0\n  }\n}\n\n#Setting increment to \".1\" & setting shift placement based on startpoint:\nadj_by &lt;- generate_increment(.1,start_point,B)\nadj_shift &lt;- generate_increment(1,start_point,B)\n\n\n#frequency from above will be assigned again here using the seq() function in base R to create a sequence of numbers from 1 to B - in order to create a \"smooth\" looking line we will \"by\" equal to \".01\" which means that we will have a point on the x axis from 1 to B every .01 increment: \nperiod &lt;- seq(from = start_point,\n             to = B*pi, \n             by = adj_by)\n#plug the period variable into our dataframe and set Y equal to our equation above. - in order to get the graph to move with these variables all of them must be present in the y column of our dataframe:\ndf &lt;- data.frame(x = period,\n               y = A*sin(period+C)+D,\n               label = 0:(length(period)-1)*adj_shift,\n               shift = D,\n               wave = \"Sine Wave Base\")\n\n#Creating a phase shifted wave to superimpose on the first wave:\ndf2 &lt;- data.frame(x = period,\n               y = A*sin(period+(C+2))+D,\n               label = 0:(length(period)-1)*adj_shift,\n               shift = D,\n               wave = \"Sine Wave Shifted\")\n\n#Creating a cosine wave to superimpose on the other waves:\ndf3 &lt;- data.frame(x = period,\n               y = A*cos(period+C)+D,\n               label = 0:(length(period)-1)*adj_shift,\n               shift = D,\n               wave = \"Cosine Wave\")\n\n\nSine Wave Graph | ggplot\n\n#Showing the  basic ggplots of each graph:\n#Pipe the data frame:\nWave1 &lt;- df %&gt;%\n  ggplot(aes(x=x,y=y))+\n  geom_line(color= \"cyan\", size = 1)+\n  labs(title = \"Sine Wave\")+\n  theme(plot.title = element_text(face = \"bold\",size = 15))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\nWave1\n\n\n\n\n\n\n\nWave2 &lt;- df2 %&gt;%\n  ggplot(aes(x=x,y=y))+\n  geom_line(color= \"cyan\", size = 1)+\n  labs(title = \"Sine Wave\")+\n  theme(plot.title = element_text(face = \"bold\",size = 15))\nWave2\n\n\n\n\n\n\n\n1:length(period)*adj_shift\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n[51] 51 52 53 54 55 56 57 58 59 60 61 62 63\n\n\n\n\nSine Wave Graph | plotly\n\n#Pull all data together to get labels:\nall_data &lt;- rbind(df,df2,df3)\n\n#Summarize and list wave labels to character vector for legend below:\nwave_type &lt;- all_data %&gt;%\n  group_by(wave) %&gt;%\n  summarise() %&gt;%\n  list() %&gt;%\n  unlist()\n\nwave_type &lt;- wave_type %&gt;% as.character()\n\n\np &lt;- ggplot() +\n  geom_line(data = df,\n            aes(x = x, y = y, color = wave),  # Map color aesthetic and provide legend label\n            size = 1,\n            linetype = \"solid\") +\n  geom_line(data = df2,\n            aes(x = x, y = y, color = wave),  # Map color aesthetic and provide legend label\n            size = 1,\n            linetype = \"solid\") +\n   geom_line(data = df3,\n            aes(x = x, y = y, color = wave),  # Map color aesthetic and provide legend label\n            size = 1,\n            linetype = \"solid\") +\n  geom_point(data = df,\n             aes(x = x, y = y, frame = label)) +\n  geom_line(data = df,\n            aes(x = x, y = shift),\n            color = \"purple\",\n            size = 1,\n            linetype = \"dashed\") +\n  labs(color = \"Wave Type\") +  # Provide a common legend title\n  scale_color_manual(values = c(\"cyan\", \"red\",\"yellow\"), labels = wave_type) # Define color palette and legend labels\n\nWarning in geom_point(data = df, aes(x = x, y = y, frame = label)): Ignoring\nunknown aesthetics: frame\n\n#Add plotly interaction and legend:\np &lt;- ggplotly(p) %&gt;%\n  plotly::layout(title = 'Wave Graph - Superimposed',plot_bgcolor = \"#e5ecf6\")\np",
    "crumbs": [
      "Plotting sine waves in ggplot & plotly"
    ]
  },
  {
    "objectID": "About.html",
    "href": "About.html",
    "title": "About",
    "section": "",
    "text": "Hello, I’m Luke Albracht, a dedicated data analytics enthusiast and supply chain strategist. My journey into the realm of data analytics commenced upon graduating from Baylor University with a degree in Supply Chain Management. Encountering real-world data challenges in my professional endeavors, I proactively enhanced my academic foundation by mastering data tools such as R and Alteryx. With over five years of hands-on experience in data extraction, analysis, and supply chain strategy, I deeply understand the pivotal role of data in driving team success. I’ve created this site to serve as a collection of projects to build on as I learn and develop in the area of data analytics.\nOutside of work, I enjoy riding my bike, playing video games, and spending time with my lovely wife, Jesse.\n\n\nAlteryx Designer Core Certification | Issued January 2024\nPrimeSource Building Products, Inc. - Irving TX | Global Sourcing Manager/Data (SME)| May 2022 - Dec 2023\nPrimeSource Building Products, Inc. - Irving TX | Buyer/Team Data (SME) | April 2021 - May 2022\nPrimeSource Building Products, Inc. - Irving TX | Sourcing Analyst | Aug 2018 - April 2021\n\n\n\nBaylor University, Waco | Waco, TX B.A in Supply Chain Management | Aug 2013 - Dec 2017",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "About.html#experience",
    "href": "About.html#experience",
    "title": "About",
    "section": "",
    "text": "Alteryx Designer Core Certification | Issued January 2024\nPrimeSource Building Products, Inc. - Irving TX | Global Sourcing Manager/Data (SME)| May 2022 - Dec 2023\nPrimeSource Building Products, Inc. - Irving TX | Buyer/Team Data (SME) | April 2021 - May 2022\nPrimeSource Building Products, Inc. - Irving TX | Sourcing Analyst | Aug 2018 - April 2021",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "About.html#education",
    "href": "About.html#education",
    "title": "About",
    "section": "",
    "text": "Baylor University, Waco | Waco, TX B.A in Supply Chain Management | Aug 2013 - Dec 2017",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "API-connection-walkthrough.html",
    "href": "API-connection-walkthrough.html",
    "title": "Strava API Connnection Walkthrough",
    "section": "",
    "text": "#Install and load the required packages if not already installed:\nif (!require(pacman)) install.packages(\"pacman\")\n\nLoading required package: pacman\n\n  p_load(tidyverse,DiagrammeR,gt,httr2,jsonlite,conflicted,httpuv,igraph,networkD3)\n#Conflicted package set to prefer dplyr over others:\n  conflicted::conflicts_prefer(dplyr::filter)\n\n[conflicted] Will prefer dplyr::filter over any other package.\n\n  conflicted::conflicts_prefer(dplyr::data_frame)\n\n[conflicted] Will prefer dplyr::data_frame over any other package.",
    "crumbs": [
      "Strava API Connnection Walkthrough"
    ]
  },
  {
    "objectID": "API-connection-walkthrough.html#libraries",
    "href": "API-connection-walkthrough.html#libraries",
    "title": "Strava API Connnection Walkthrough",
    "section": "",
    "text": "#Install and load the required packages if not already installed:\nif (!require(pacman)) install.packages(\"pacman\")\n\nLoading required package: pacman\n\n  p_load(tidyverse,DiagrammeR,gt,httr2,jsonlite,conflicted,httpuv,igraph,networkD3)\n#Conflicted package set to prefer dplyr over others:\n  conflicted::conflicts_prefer(dplyr::filter)\n\n[conflicted] Will prefer dplyr::filter over any other package.\n\n  conflicted::conflicts_prefer(dplyr::data_frame)\n\n[conflicted] Will prefer dplyr::data_frame over any other package.",
    "crumbs": [
      "Strava API Connnection Walkthrough"
    ]
  },
  {
    "objectID": "API-connection-walkthrough.html#api-connection-steps-overview",
    "href": "API-connection-walkthrough.html#api-connection-steps-overview",
    "title": "Strava API Connnection Walkthrough",
    "section": "API Connection steps | Overview",
    "text": "API Connection steps | Overview\n\nDisclaimer\nThis document serves as a walk through for connecting to API’s through R using the httr2 package. In this instance I will be attempting to connect to Strava’s API. I do not own this information (aside from my personal Strava data) and this is simply a collection of notes to aid in my own learning process. I am aware of the package rStrava and I drew from their package for inspiration here. I explicitly used their ratelimit function below and I have properly credited them for that. My secondary goal with this document is to familiarize myself with httr2 which is why I have not opted to use existing packages, and instead experiment with this package.\n\n\nDocs\n\nRead the documentation - Strava API V3 Documentation\nThis walk through is intended to summarize what I have learned and make the pain points more digestible. However, I cannot cover everything, with that in mind reading the documentation is still the best way to familiarize yourself with this process.\n\n\n\nOAuth2.0\n\nAuthentication - Strava uses OAuth 2.0 as its method of authentication. Below is how I break this down in my mind:\n\nOAuth is an authorization framework that allows third party applications to access data on behalf of a user. These are the parties involved in this transaction:\n\nResource Owner: The entity that owns the resource and is capable of granting access to it. Typically, this is the end-user.\nClient: The application requesting access to the resource on behalf of the resource owner. This is often a third-party application.\nAuthorization Server: The server that authenticates the resource owner and issues access tokens after getting proper authorization.\nResource Server: The server hosting the protected resources, capable of accepting and responding to protected resource requests using access tokens\n\n\n\n\nAuthorization flowchart\nIt is helpful to identify the type of Oauth flow that is utilized so that you know what to incorporate in your GET request.\n\nClient credentials flow - I believe that Strava is using this type of authorization. Their docs state they allow external apps to request user data, and users can grant and revoke API access on a “per-application” basis. With this method authentication is done using a client ID and secret. The returned access token grants the client access to specific, predefined scopes.\n\nAccess Token: A token that represents the authorization granted to the client.\n\n\n#|format: html\n#|code-fold: true\n#|label: OAuth-flowchart\n#|fig-cap-location: top\n#|fig-cap: OAuth visualization\n\n#I am testing out the DiagrammeR package below to visualize a basic Oauth flow.\n\n\nnode_ht &lt;-  2\nnode_w &lt;-  1\n\nDiagram &lt;- create_graph(directed = FALSE,\n                        attr_theme = \"lr\") %&gt;% #theme is set \"Left to Right\"\n\n# add_node() & node_aes() are all geared \n# toward formatting node attributes: color, height, shape etc. ----\n\n  add_node(\n    node_aes = node_aes(\n      shape = \"rectangle\",\n      color = \"steelblue\",\n      fillcolor = \"#007AC1\",\n      fontcolor = \"White\",\n      width = 2,\n      height = 5,\n    ),\n    type = \"B\",\n    label = \"Application\\n(Client)\\n(My Strava App)\") %&gt;%\n  add_node(\n    node_aes = node_aes(\n      shape = \"rectangle\",\n      color = \"steelblue\",\n      fillcolor = \"#FDBB30\",\n      fontcolor = \"White\",\n      width = node_w,\n      height = node_ht,\n      x = 5\n    ),\n    type = \"A\",\n    label = \"User\\n(My Strava\\nProfile)\") %&gt;%\n  add_node(\n    node_aes = node_aes(\n      shape = \"rectangle\",\n      color = \"steelblue\",\n      fillcolor = \"mediumvioletred\",\n      fontcolor = \"White\",\n      width = node_w,\n      height = node_ht,\n    ),\n    type = \"A\",\n    label = \"Authorization\\nServer\") %&gt;%\n  add_node(\n    node_aes = node_aes(\n      shape = \"rectangle\",\n      color = \"steelblue\",\n      fillcolor = \"Orangered\",\n      fontcolor = \"White\",\n      width = node_w,\n      height = node_ht,\n    ),\n    type = \"A\",\n    label = \"Resource\\n Server\") %&gt;%\n\n# Edge creation and formatting - \"edges\" are the arrows that connect our nodes.\n# Edges show the flow of info through our charts. Due to the exchange in our data we will see 6 edges:\n\n  add_edge(from = 1, to = 2,edge_aes = edge_aes(\n    label = \"1.)Authorization is requested from the\\n app to the user/profile/data owner.\",\n    fontsize = 12,\n    penwidth = 5,\n    color = \"Orange\",\n    arrowsize = .5,\n    tailport = \"n\",\n    headport = \"n\",\n    dir = \"forward\"\n  )) %&gt;%\n  add_edge(from = 2, to = 1,edge_aes = edge_aes(\n    label = \"2.)User grants authorization to the app.\",\n    fontsize = 12,\n    penwidth = 5,\n    color = \"Orange\",\n    arrowsize = .5,\n    dir = \"forward\"\n  )) %&gt;%\n    add_edge(from = 1, to = 3,edge_aes = edge_aes(\n    label = \"3.)App sends the authorization grant\\nto the authorization server\",\n    fontsize = 12,\n    penwidth = 5,\n    color = \"Orange\",\n    arrowsize = .5,\n    headport = \"n\",\n    dir = \"forward\"\n  )) %&gt;% \n    add_edge(from = 3, to = 1,edge_aes = edge_aes(\n    label = \"4.)Access token is granted to the app.\",\n    fontsize = 12,\n    penwidth = 5,\n    color = \"Orange\",\n    arrowsize = .5,\n    tailport = \"w\",\n    dir = \"forward\"\n  )) %&gt;% \n   add_edge(from = 1, to = 4,edge_aes = edge_aes(\n    label = \"5.)Access token is sent from app\\nvia HTTP|GET request.\",\n    fontsize = 12,\n    penwidth = 5,\n    color = \"Orange\",\n    arrowsize = .5,\n    dir = \"forward\",\n    headport = \"w\"\n  )) %&gt;% \n    add_edge(from = 4, to = 1,edge_aes = edge_aes(\n    label = \"6.)Access to resource data\\nis granted to the application.\",\n    fontsize = 12,\n    penwidth = 5,\n    color = \"Orange\",\n    tailport = \"s\",\n    headport = \"s\",\n    dir = \"forward\"))\n\n# Render the graph ----\nrender_graph(Diagram)\n\n\n\n\n\n\n\n\n\nHTTP\n\nHyper Text Transfer Protocol - HTTP serves as the underlying “protocol” or rules/procedures that Strava’s API uses. In the context of connecting to an API in R we need a library that can handle this, which is where the httr2 package comes into play. Below are some of the key concepts of connecting using HTTP\n\n\nRequest | Response model - We mentioned this above and displayed this in our flowchart:\n\nClient - App creator | request maker\nServer - Resource owner | responds to the request\n\nHTTP Methods - There are a number of methods, for our purposes the “GET” method is the only one we will use. This method is a request to retrieve data from the server.\nURIs | URLs - Uniform resource identifier also known as uniform resource locator specifies the address of the resource.\n\nBase URL - This can be found in the API documentation:\n\n\n\n\nBase URL\n\n\nData formats - The next consideration we have to make is the structure of the data that the API contains. There are two common formats; JSON (JavaScript Object Notation) and XML (extensible Markup Language). Strava’s structure is JSON so we are going to recruit the jsonlite package to help parse and map the API’s data into R objects.\n\n\n\nAPI Application\nIn this step we are going to put everything together. Using what we know about HTTP requests, OAuth2.0, and the instructions presented in Strava API V3 Documentation we should have registered our application and generated our tokens.\n\n\n\nExample Strava Creditials\n\n\n\n\nGET Request | httr2\nBelow I will be leaning on the httr2 OAuth vignette and taking notes/learning as I go. This vignette gives a much more in depth description of the OAuth framework and breaks down the httr2 connection process very succinctly.\nFor privacy I have added all keys to my .Renviron file. The keys are saved as environment variables to avoid including the creditials inside my code below I am assigning them so that I can use them in the GET request:\n\napp_name &lt;- Sys.getenv(\"app_name\") # Chosen by user\napp_client_id &lt;- Sys.getenv(\"app_client_id\") # this is assigned by Strava above listed as \"Client ID\" in the image\napp_secret &lt;- Sys.getenv(\"app_secret\") # This is assigned by strava as well listed as \"Client Secret\" above. You need to create an account and app in order to see this.\n\n\n\nEndpoint URLs\n\nLocation’s where Strava’s server/servers are hosting the data. They can be found in Strava API V3 Documentation\n\n\n\nToken URL - https://www.strava.com/oauth/token\n\n\n\n\n\nAuthorization URL - https://www.strava.com/oauth/authorize\n\n\n\n\ntoken_url &lt;- \"https://www.strava.com/oauth/token\"\nauth_url &lt;- \"https://www.strava.com/oauth/authorize\"\nbase_url &lt;- \"https://www.strava.com/api/v3\"\n\n\n\nScopes\n\n\n\nStrava Scopes - These define the applications access controls\n\n\nCreating our request & using req_dry_run() to see what the request entails:\n\n# Method - GET \n# Path - (/api/v3) \n# HTTP protocol version - HTTP/1.1\nreq &lt;- request(base_url) %&gt;% req_cache(tempdir())\nreq %&gt;% req_headers(Name = \"Luke Albracht\") %&gt;% req_dry_run()\n\nGET /api/v3 HTTP/1.1\nHost: www.strava.com\nUser-Agent: httr2/1.0.0 r-curl/5.2.1 libcurl/8.3.0\nAccept: */*\nAccept-Encoding: deflate, gzip\nName: Luke Albracht\n\n\n\n\nClient Creation\nThe httr2 OAuth vignette starts with client creation which is the first step to API connection. Using the oauth_client() function. The arguments id, token_url, secret, and name are all elements that we already accumulated. Below I have assigned these to the “strava_client” object.\n\n#Client creation httr2:\nstrava_client &lt;- oauth_client(\n    app_client_id,\n    secret = app_secret,\n    name = app_name,\n    token_url = token_url)\nstrava_client\n\n&lt;httr2_oauth_client&gt;\n\n\nname:\n\n\nid:\n\n\nsecret: &lt;REDACTED&gt;\n\n\ntoken_url: https://www.strava.com/oauth/token\n\n\nauth: oauth_client_req_auth_body\n\n\n\n\nOAuth code flow\nR continues to throw an error over the code below. I could not figure out the purpose of this step when we just ended up using req_oauth_auth_code() below in our GET request. The way that I understand this, since we already have our token this step took us to the auth_url. Seems like it might be an issue specific to the API or user error. Regardless, I am keeping this step as a part of the process.\n\nreq_dry_run(oauth_client_req_auth(req,strava_client),redact_headers = TRUE)\n\n\n\n\nAuthentication Message example\n\n\n\n\nRequest\nTo do this in httr2 I took the “req” object created above and piped it through to the family of “req_” functions that help to authenticate the request.\n\nreq_url_path_append() - adding the endpoints that I need to the base url above. The endpoints come from the Strava API which details what data each endpoint contains.\nreq_url_query() - Strava’s docs dictate that we can specify the number of pages as well as items per page. Items per page or activities per page is set to the default of 30 and pages defaults as 1. We can use the url query to pass these unique parameters into our request.\nreq_oauth_auth_code() - Finally we used this function for our authorization code flow as it covers what is needed for our application.\nreq_perform() - This function is used to perform the get request. Once we have created the desired request with all necessary parameters, then we need to pipe that request into this function and store the response.\n\n\n\nEndpoint Params for URL query\n\n\nBasic httr2 pipe based GET request:\n\n#GET request using everything we have covered so far:\nreq &lt;- request(base_url) %&gt;%\n  req_url_path_append(\"activities\") %&gt;%\n  req_url_query(per_page = 200, page = 1) %&gt;%\n  req_oauth_auth_code(client = strava_client,\n                      auth_url = auth_url,\n                      scope = \"activity:read_all\",\n                      cache_disk = TRUE)\n\n#Performing request and returning the HTTP response and storing it:\nresp &lt;- req %&gt;% req_perform()\n#Check the status of our response from the auth server:\nresp\n#Storing the body of the response as a list of lists:\nstrava_json &lt;- resp %&gt;% resp_body_json()\n\n\nTo re-cap at this point I now have the follow data objects in my environment window:\n\n#This function was built to return the Name and Type of object in the enviroment window - I wanted a filtered list of the objects that matter and did not want to include the values/secrets:\nenv_obj_classes &lt;- function() {\n  # List the objects in your R environment\n  object_list &lt;- ls(envir = .GlobalEnv)\n  # Check if there are no objects\n  if (length(object_list) == 0) {\n    cat(\"No objects found in the environment.\\n\")\n    return(data.frame(Name = character(), Class = character(), stringsAsFactors = FALSE))\n  }\n  # Initialize an empty data frame\n  env_obj_df &lt;- data.frame(Name = character(), Class = character(), stringsAsFactors = FALSE)\n  # Loop through each object and populate the data frame\n  for (object_name in object_list) {\n    env_obj_df &lt;- rbind(\n      env_obj_df,\n      data.frame(\n        Name = object_name,\n        Class = class(get(object_name)),\n        stringsAsFactors = FALSE\n      )\n    )\n  }\n  return(env_obj_df)\n}\nenv_obj_classes() %&gt;% filter(str_detect(Name,\"strava|req|resp\")) %&gt;% tibble()",
    "crumbs": [
      "Strava API Connnection Walkthrough"
    ]
  },
  {
    "objectID": "API-connection-walkthrough.html#part-ii-request-modification",
    "href": "API-connection-walkthrough.html#part-ii-request-modification",
    "title": "Strava API Connnection Walkthrough",
    "section": "Part II | Request Modification",
    "text": "Part II | Request Modification\nUp to this point I have covered the following:\n\nThe basics of OAuth2.0 & HTTP\nThe important parts of Strava’s API and how to use them to connect.\nThe basics of a GET request using httr2\n\nThe last part of this walk through I will cover pagination and how to modify your request in order to gather all available user data. I will be drawing from the rStrava package and watering it down to learn from them and to modify their functions for my own uses. Their package and functions take out all of the leg work that I am doing and I highly recommend using them. However, like I said in the beginning, I am using this project to develop and learn about what what is going on “under the hood”.\n\nPagination\nThis is extremely important concept if you are new to working with APIs. Pagination as it refers to APIs is the practice of breaking up the data into smaller chunks. From what I gathered, the main reason this is done is to improve performance. In my case rather than pull all 600+ activities they are broken up into chunks of 200. We can see from the Strava API that the activities endpoint has query parameters page & per_page listed above. This might be simple for most to understand, but I made the mistake of thinking of “page” as “number of pages” when above it is defined as “page number” in the sense that the pages are indexed. Each page is given an “id” 1,2,3,4….. each page can at max hold 200 items or activities. The defaults are set to pull 30 items from page 1. How did we find the 200 max? - Answer in the docs:\n\n\n\nRate Limits\nIn my case rate limits are not as big a concern as I will be the sole user of my application. It is highly unlikely I will exceed either of the limits. We can find the two types of “rate limits” that Strava maintains. The value of X-RateLimit-Limit is “200,2000” this is read as: “200 requests every 15 minutes, 2000 daily requests” we are dependent upon Strava’s documentation for this information which is referred to as the “overall rate limit”. Additionally, The value of X-ReadRateLimit-Limit is “100,1000” this is read as: “100 requests every 15 minutes, 1000 daily requests” this is referred to as “read rate limit”. Which one do we use?\nThis is another example of where we are really dependent upon “good/detailed” API documentation. The distinction between “overall rate limit” & “read rate limit” is obscure. I did not find it explicitly detailed in the documentation and I believe other users found the same issues. After this question was posted in the Strava forums the answer was published by Strava. They detail that the type of activity is a consideration in the rate limits:\n\nI know that my goal will only employ the use of the HTTP GET requests so this answers my question and I will use X-RateLimit-Limit & X-RateLimit-Usage for my project. Given the above considerations of pagination and rate limits, we know at max we can get 200 activities per page but right now the request is only pulling one page at a time. I have ~600 activities I would like to gather data on. So we have two tasks:\n\nUsing Iteration to get around the Pagination problem:\n\nreq_perform_iterative() - I am using this to perform multiple requests to the API iteratively:\n\nI pass my req request from above as one of the arguments.\nnext_req() this argument is a function that allows me to define how I want to handle the next request. In this case I am going to pass another function into this argument iterate_with_offset().\nprogress - added a progress bar because its pretty cool!\n\niterate_with_offset() - With this function I can adjust the query params from my original request. In this case I am targeting the page parameter. The key to this function is the callback function is_complete that is nested inside.\n\nis_complete - Evaluates to either TRUE or FALSE. When the resp object is returned in each iteration this function looks at the length of the body of the object. When length is == 0 that means there are no more activities to pull; is_complete would return TRUE and the resp_complete argument will stop the loop (Note: the loop is stopped on the first page to return 0 so we do receive one empty page but it will not affect the output).\n\n\nSet parameters for total requests:\n\nThis is not as serious in my case because I am not creating a package and I have no users. but regardless req_perform_iterative() -&gt; max_reqs allows me to plug in my current usage rate to be positive that I never eclipse the 15 minute request limit. Ratelimit() comes from rStrava I am including it here in the context of rate limits as an example how to handle them.\n\n\nThat’s it, below is the complete modified request. that I do not have to re-run everything I will call the basic request using R’s source function:\n\n#Callback function that with logical response:\nis_complete &lt;- function(resp) {\n  length(resp_body_json(resp)) == 0\n}\n\nratelimit &lt;- function(req){\n    \n    limit &lt;- as.integer(strsplit(req$headers$`x-ratelimit-limit`, \",\")[[1]])\n    usage &lt;- as.integer(strsplit(req$headers$`x-ratelimit-usage`, \",\")[[1]])\n    usage_left &lt;- limit - usage\n    \n#performs all three calculations above but returns only the last calculation when the function is used. \n    return(usage_left)\n    \n}\n\n#Below is the wrapped iterative request with all of our functions and reqs placed inside:\nresps &lt;- req_perform_iterative(\n  req,\n  next_req = iterate_with_offset(start = 1,\"page\", resp_complete = is_complete),\n  max_reqs = ratelimit(resp) %&gt;% .[1],\n  progress = TRUE\n)\n\n\n#Displaying the outcome:\nresps",
    "crumbs": [
      "Strava API Connnection Walkthrough"
    ]
  }
]